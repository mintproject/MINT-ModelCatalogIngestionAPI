# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from openapi_server import util
from openapi_server.models.base_model_ import Model


class Unit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, description=None, label=None, part=None, dimension=None, abbreviation=None):  # noqa: E501
        """Unit - a model defined in OpenAPI

        :param id: The id of this Unit.  # noqa: E501
        :type id: str
        :param type: The type of this Unit.  # noqa: E501
        :type type: List[str]
        :param description: The description of this Unit.  # noqa: E501
        :type description: str
        :param label: The label of this Unit.  # noqa: E501
        :type label: str
        :param part: The part of this Unit.  # noqa: E501
        :type part: List[str]
        :param dimension: The dimension of this Unit.  # noqa: E501
        :type dimension: List[str]
        :param abbreviation: The abbreviation of this Unit.  # noqa: E501
        :type abbreviation: List[str]
        """
        self.openapi_types = {
            'id': str,
            'type': List[str],
            'description': str,
            'label': str,
            'part': List[str],
            'dimension': List[str],
            'abbreviation': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'description': 'description',
            'label': 'label',
            'part': 'part',
            'dimension': 'dimension',
            'abbreviation': 'abbreviation'
        }

        self._id = id
        self._type = type
        self._description = description
        self._label = label
        self._part = part
        self._dimension = dimension
        self._abbreviation = abbreviation

    @classmethod
    def from_dict(cls, dikt) -> 'Unit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Unit of this Unit.  # noqa: E501
        :rtype: Unit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Unit.


        :return: The id of this Unit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Unit.


        :param id: The id of this Unit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this Unit.


        :return: The type of this Unit.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Unit.


        :param type: The type of this Unit.
        :type type: List[str]
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this Unit.


        :return: The description of this Unit.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Unit.


        :param description: The description of this Unit.
        :type description: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Unit.


        :return: The label of this Unit.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Unit.


        :param label: The label of this Unit.
        :type label: str
        """

        self._label = label

    @property
    def part(self):
        """Gets the part of this Unit.


        :return: The part of this Unit.
        :rtype: List[str]
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this Unit.


        :param part: The part of this Unit.
        :type part: List[str]
        """

        self._part = part

    @property
    def dimension(self):
        """Gets the dimension of this Unit.


        :return: The dimension of this Unit.
        :rtype: List[str]
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this Unit.


        :param dimension: The dimension of this Unit.
        :type dimension: List[str]
        """

        self._dimension = dimension

    @property
    def abbreviation(self):
        """Gets the abbreviation of this Unit.


        :return: The abbreviation of this Unit.
        :rtype: List[str]
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this Unit.


        :param abbreviation: The abbreviation of this Unit.
        :type abbreviation: List[str]
        """

        self._abbreviation = abbreviation
