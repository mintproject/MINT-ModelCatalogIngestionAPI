# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_download_instructions=None, keywords=None, has_documentation=None, has_grid=None, software_requirements=None, has_download_url=None, type=None, has_installation_instructions=None, compatible_visualization_software=None, copyright_holder=None, has_faq=None, logo=None, has_contact_person=None, id=None, identifier=None, author=None, has_build_file=None, short_description=None, date_published=None, license=None, has_source_code=None, has_explanation_diagram=None, has_example=None, publisher=None, doi=None, has_funding=None, support_details=None, has_version=None, has_typical_data_source=None, description=None, reference_publication=None, screenshot=None, has_model_category=None, had_primary_source=None, issue_tracker=None, date_created=None, contributor=None, has_purpose=None, has_executable_instructions=None, has_sample_visualization=None, memory_requirements=None, website=None, citation=None, processor_requirements=None, has_usage_notes=None, readme=None, label=None, has_assumption=None, operating_systems=None, has_executable_notebook=None, has_equation=None, useful_for_calculating_index=None):  # noqa: E501
        """Model - a model defined in OpenAPI

        :param has_download_instructions: The has_download_instructions of this Model.  # noqa: E501
        :type has_download_instructions: List[str]
        :param keywords: The keywords of this Model.  # noqa: E501
        :type keywords: List[str]
        :param has_documentation: The has_documentation of this Model.  # noqa: E501
        :type has_documentation: List[str]
        :param has_grid: The has_grid of this Model.  # noqa: E501
        :type has_grid: List[Grid]
        :param software_requirements: The software_requirements of this Model.  # noqa: E501
        :type software_requirements: List[str]
        :param has_download_url: The has_download_url of this Model.  # noqa: E501
        :type has_download_url: List[str]
        :param type: The type of this Model.  # noqa: E501
        :type type: List[str]
        :param has_installation_instructions: The has_installation_instructions of this Model.  # noqa: E501
        :type has_installation_instructions: List[str]
        :param compatible_visualization_software: The compatible_visualization_software of this Model.  # noqa: E501
        :type compatible_visualization_software: List[Software]
        :param copyright_holder: The copyright_holder of this Model.  # noqa: E501
        :type copyright_holder: List[AnyOfOrganizationPerson]
        :param has_faq: The has_faq of this Model.  # noqa: E501
        :type has_faq: List[str]
        :param logo: The logo of this Model.  # noqa: E501
        :type logo: List[Image]
        :param has_contact_person: The has_contact_person of this Model.  # noqa: E501
        :type has_contact_person: List[AnyOfOrganizationPerson]
        :param id: The id of this Model.  # noqa: E501
        :type id: str
        :param identifier: The identifier of this Model.  # noqa: E501
        :type identifier: List[str]
        :param author: The author of this Model.  # noqa: E501
        :type author: List[AnyOfOrganizationPerson]
        :param has_build_file: The has_build_file of this Model.  # noqa: E501
        :type has_build_file: List[str]
        :param short_description: The short_description of this Model.  # noqa: E501
        :type short_description: List[str]
        :param date_published: The date_published of this Model.  # noqa: E501
        :type date_published: List[datetime]
        :param license: The license of this Model.  # noqa: E501
        :type license: List[str]
        :param has_source_code: The has_source_code of this Model.  # noqa: E501
        :type has_source_code: List[SourceCode]
        :param has_explanation_diagram: The has_explanation_diagram of this Model.  # noqa: E501
        :type has_explanation_diagram: List[Image]
        :param has_example: The has_example of this Model.  # noqa: E501
        :type has_example: List[str]
        :param publisher: The publisher of this Model.  # noqa: E501
        :type publisher: List[AnyOfOrganizationPerson]
        :param doi: The doi of this Model.  # noqa: E501
        :type doi: List[str]
        :param has_funding: The has_funding of this Model.  # noqa: E501
        :type has_funding: List[FundingInformation]
        :param support_details: The support_details of this Model.  # noqa: E501
        :type support_details: List[str]
        :param has_version: The has_version of this Model.  # noqa: E501
        :type has_version: List[SoftwareVersion]
        :param has_typical_data_source: The has_typical_data_source of this Model.  # noqa: E501
        :type has_typical_data_source: List[str]
        :param description: The description of this Model.  # noqa: E501
        :type description: List[str]
        :param reference_publication: The reference_publication of this Model.  # noqa: E501
        :type reference_publication: List[str]
        :param screenshot: The screenshot of this Model.  # noqa: E501
        :type screenshot: List[Image]
        :param has_model_category: The has_model_category of this Model.  # noqa: E501
        :type has_model_category: List[ModelCategory]
        :param had_primary_source: The had_primary_source of this Model.  # noqa: E501
        :type had_primary_source: List[object]
        :param issue_tracker: The issue_tracker of this Model.  # noqa: E501
        :type issue_tracker: List[str]
        :param date_created: The date_created of this Model.  # noqa: E501
        :type date_created: List[datetime]
        :param contributor: The contributor of this Model.  # noqa: E501
        :type contributor: List[Person]
        :param has_purpose: The has_purpose of this Model.  # noqa: E501
        :type has_purpose: List[str]
        :param has_executable_instructions: The has_executable_instructions of this Model.  # noqa: E501
        :type has_executable_instructions: List[str]
        :param has_sample_visualization: The has_sample_visualization of this Model.  # noqa: E501
        :type has_sample_visualization: List[Visualization]
        :param memory_requirements: The memory_requirements of this Model.  # noqa: E501
        :type memory_requirements: List[str]
        :param website: The website of this Model.  # noqa: E501
        :type website: List[str]
        :param citation: The citation of this Model.  # noqa: E501
        :type citation: List[str]
        :param processor_requirements: The processor_requirements of this Model.  # noqa: E501
        :type processor_requirements: List[str]
        :param has_usage_notes: The has_usage_notes of this Model.  # noqa: E501
        :type has_usage_notes: List[str]
        :param readme: The readme of this Model.  # noqa: E501
        :type readme: List[str]
        :param label: The label of this Model.  # noqa: E501
        :type label: List[str]
        :param has_assumption: The has_assumption of this Model.  # noqa: E501
        :type has_assumption: List[str]
        :param operating_systems: The operating_systems of this Model.  # noqa: E501
        :type operating_systems: List[str]
        :param has_executable_notebook: The has_executable_notebook of this Model.  # noqa: E501
        :type has_executable_notebook: List[str]
        :param has_equation: The has_equation of this Model.  # noqa: E501
        :type has_equation: List[Equation]
        :param useful_for_calculating_index: The useful_for_calculating_index of this Model.  # noqa: E501
        :type useful_for_calculating_index: List[NumericalIndex]
        """
        from openapi_server.models.any_of_organization_person import AnyOfOrganizationPerson
        from openapi_server.models.equation import Equation
        from openapi_server.models.funding_information import FundingInformation
        from openapi_server.models.grid import Grid
        from openapi_server.models.image import Image
        from openapi_server.models.model_category import ModelCategory
        from openapi_server.models.numerical_index import NumericalIndex
        from openapi_server.models.person import Person
        from openapi_server.models.software import Software
        from openapi_server.models.software_version import SoftwareVersion
        from openapi_server.models.source_code import SourceCode
        from openapi_server.models.visualization import Visualization

          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501
          # noqa: E501

        self.openapi_types = {
            'has_download_instructions': List[str],
            'keywords': List[str],
            'has_documentation': List[str],
            'has_grid': List[Grid],
            'software_requirements': List[str],
            'has_download_url': List[str],
            'type': List[str],
            'has_installation_instructions': List[str],
            'compatible_visualization_software': List[Software],
            'copyright_holder': List[AnyOfOrganizationPerson],
            'has_faq': List[str],
            'logo': List[Image],
            'has_contact_person': List[AnyOfOrganizationPerson],
            'id': str,
            'identifier': List[str],
            'author': List[AnyOfOrganizationPerson],
            'has_build_file': List[str],
            'short_description': List[str],
            'date_published': List[datetime],
            'license': List[str],
            'has_source_code': List[SourceCode],
            'has_explanation_diagram': List[Image],
            'has_example': List[str],
            'publisher': List[AnyOfOrganizationPerson],
            'doi': List[str],
            'has_funding': List[FundingInformation],
            'support_details': List[str],
            'has_version': List[SoftwareVersion],
            'has_typical_data_source': List[str],
            'description': List[str],
            'reference_publication': List[str],
            'screenshot': List[Image],
            'has_model_category': List[ModelCategory],
            'had_primary_source': List[object],
            'issue_tracker': List[str],
            'date_created': List[datetime],
            'contributor': List[Person],
            'has_purpose': List[str],
            'has_executable_instructions': List[str],
            'has_sample_visualization': List[Visualization],
            'memory_requirements': List[str],
            'website': List[str],
            'citation': List[str],
            'processor_requirements': List[str],
            'has_usage_notes': List[str],
            'readme': List[str],
            'label': List[str],
            'has_assumption': List[str],
            'operating_systems': List[str],
            'has_executable_notebook': List[str],
            'has_equation': List[Equation],
            'useful_for_calculating_index': List[NumericalIndex]
        }

        self.attribute_map = {
            'has_download_instructions': 'hasDownloadInstructions',
            'keywords': 'keywords',
            'has_documentation': 'hasDocumentation',
            'has_grid': 'hasGrid',
            'software_requirements': 'softwareRequirements',
            'has_download_url': 'hasDownloadURL',
            'type': 'type',
            'has_installation_instructions': 'hasInstallationInstructions',
            'compatible_visualization_software': 'compatibleVisualizationSoftware',
            'copyright_holder': 'copyrightHolder',
            'has_faq': 'hasFAQ',
            'logo': 'logo',
            'has_contact_person': 'hasContactPerson',
            'id': 'id',
            'identifier': 'identifier',
            'author': 'author',
            'has_build_file': 'hasBuildFile',
            'short_description': 'shortDescription',
            'date_published': 'datePublished',
            'license': 'license',
            'has_source_code': 'hasSourceCode',
            'has_explanation_diagram': 'hasExplanationDiagram',
            'has_example': 'hasExample',
            'publisher': 'publisher',
            'doi': 'doi',
            'has_funding': 'hasFunding',
            'support_details': 'supportDetails',
            'has_version': 'hasVersion',
            'has_typical_data_source': 'hasTypicalDataSource',
            'description': 'description',
            'reference_publication': 'referencePublication',
            'screenshot': 'screenshot',
            'has_model_category': 'hasModelCategory',
            'had_primary_source': 'hadPrimarySource',
            'issue_tracker': 'issueTracker',
            'date_created': 'dateCreated',
            'contributor': 'contributor',
            'has_purpose': 'hasPurpose',
            'has_executable_instructions': 'hasExecutableInstructions',
            'has_sample_visualization': 'hasSampleVisualization',
            'memory_requirements': 'memoryRequirements',
            'website': 'website',
            'citation': 'citation',
            'processor_requirements': 'processorRequirements',
            'has_usage_notes': 'hasUsageNotes',
            'readme': 'readme',
            'label': 'label',
            'has_assumption': 'hasAssumption',
            'operating_systems': 'operatingSystems',
            'has_executable_notebook': 'hasExecutableNotebook',
            'has_equation': 'hasEquation',
            'useful_for_calculating_index': 'usefulForCalculatingIndex'
        }

        self._has_download_instructions = has_download_instructions
        self._keywords = keywords
        self._has_documentation = has_documentation
        self._has_grid = has_grid
        self._software_requirements = software_requirements
        self._has_download_url = has_download_url
        self._type = type
        self._has_installation_instructions = has_installation_instructions
        self._compatible_visualization_software = compatible_visualization_software
        self._copyright_holder = copyright_holder
        self._has_faq = has_faq
        self._logo = logo
        self._has_contact_person = has_contact_person
        self._id = id
        self._identifier = identifier
        self._author = author
        self._has_build_file = has_build_file
        self._short_description = short_description
        self._date_published = date_published
        self._license = license
        self._has_source_code = has_source_code
        self._has_explanation_diagram = has_explanation_diagram
        self._has_example = has_example
        self._publisher = publisher
        self._doi = doi
        self._has_funding = has_funding
        self._support_details = support_details
        self._has_version = has_version
        self._has_typical_data_source = has_typical_data_source
        self._description = description
        self._reference_publication = reference_publication
        self._screenshot = screenshot
        self._has_model_category = has_model_category
        self._had_primary_source = had_primary_source
        self._issue_tracker = issue_tracker
        self._date_created = date_created
        self._contributor = contributor
        self._has_purpose = has_purpose
        self._has_executable_instructions = has_executable_instructions
        self._has_sample_visualization = has_sample_visualization
        self._memory_requirements = memory_requirements
        self._website = website
        self._citation = citation
        self._processor_requirements = processor_requirements
        self._has_usage_notes = has_usage_notes
        self._readme = readme
        self._label = label
        self._has_assumption = has_assumption
        self._operating_systems = operating_systems
        self._has_executable_notebook = has_executable_notebook
        self._has_equation = has_equation
        self._useful_for_calculating_index = useful_for_calculating_index

    @classmethod
    def from_dict(cls, dikt) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Model of this Model.  # noqa: E501
        :rtype: Model
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_download_instructions(self):
        """Gets the has_download_instructions of this Model.

        Description not available  # noqa: E501

        :return: The has_download_instructions of this Model.
        :rtype: List[str]
        """
        return self._has_download_instructions

    @has_download_instructions.setter
    def has_download_instructions(self, has_download_instructions):
        """Sets the has_download_instructions of this Model.

        Description not available  # noqa: E501

        :param has_download_instructions: The has_download_instructions of this Model.
        :type has_download_instructions: List[str]
        """

        self._has_download_instructions = has_download_instructions

    @property
    def keywords(self):
        """Gets the keywords of this Model.

        Description not available  # noqa: E501

        :return: The keywords of this Model.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Model.

        Description not available  # noqa: E501

        :param keywords: The keywords of this Model.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def has_documentation(self):
        """Gets the has_documentation of this Model.

        Description not available  # noqa: E501

        :return: The has_documentation of this Model.
        :rtype: List[str]
        """
        return self._has_documentation

    @has_documentation.setter
    def has_documentation(self, has_documentation):
        """Sets the has_documentation of this Model.

        Description not available  # noqa: E501

        :param has_documentation: The has_documentation of this Model.
        :type has_documentation: List[str]
        """

        self._has_documentation = has_documentation

    @property
    def has_grid(self):
        """Gets the has_grid of this Model.

        Grid information about the model  # noqa: E501

        :return: The has_grid of this Model.
        :rtype: List[Grid]
        """
        return self._has_grid

    @has_grid.setter
    def has_grid(self, has_grid):
        """Sets the has_grid of this Model.

        Grid information about the model  # noqa: E501

        :param has_grid: The has_grid of this Model.
        :type has_grid: List[Grid]
        """

        self._has_grid = has_grid

    @property
    def software_requirements(self):
        """Gets the software_requirements of this Model.

        Description not available  # noqa: E501

        :return: The software_requirements of this Model.
        :rtype: List[str]
        """
        return self._software_requirements

    @software_requirements.setter
    def software_requirements(self, software_requirements):
        """Sets the software_requirements of this Model.

        Description not available  # noqa: E501

        :param software_requirements: The software_requirements of this Model.
        :type software_requirements: List[str]
        """

        self._software_requirements = software_requirements

    @property
    def has_download_url(self):
        """Gets the has_download_url of this Model.

        Description not available  # noqa: E501

        :return: The has_download_url of this Model.
        :rtype: List[str]
        """
        return self._has_download_url

    @has_download_url.setter
    def has_download_url(self, has_download_url):
        """Sets the has_download_url of this Model.

        Description not available  # noqa: E501

        :param has_download_url: The has_download_url of this Model.
        :type has_download_url: List[str]
        """

        self._has_download_url = has_download_url

    @property
    def type(self):
        """Gets the type of this Model.

        type of the resource  # noqa: E501

        :return: The type of this Model.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Model.

        type of the resource  # noqa: E501

        :param type: The type of this Model.
        :type type: List[str]
        """

        self._type = type

    @property
    def has_installation_instructions(self):
        """Gets the has_installation_instructions of this Model.

        Description not available  # noqa: E501

        :return: The has_installation_instructions of this Model.
        :rtype: List[str]
        """
        return self._has_installation_instructions

    @has_installation_instructions.setter
    def has_installation_instructions(self, has_installation_instructions):
        """Sets the has_installation_instructions of this Model.

        Description not available  # noqa: E501

        :param has_installation_instructions: The has_installation_instructions of this Model.
        :type has_installation_instructions: List[str]
        """

        self._has_installation_instructions = has_installation_instructions

    @property
    def compatible_visualization_software(self):
        """Gets the compatible_visualization_software of this Model.

        Description not available  # noqa: E501

        :return: The compatible_visualization_software of this Model.
        :rtype: List[Software]
        """
        return self._compatible_visualization_software

    @compatible_visualization_software.setter
    def compatible_visualization_software(self, compatible_visualization_software):
        """Sets the compatible_visualization_software of this Model.

        Description not available  # noqa: E501

        :param compatible_visualization_software: The compatible_visualization_software of this Model.
        :type compatible_visualization_software: List[Software]
        """

        self._compatible_visualization_software = compatible_visualization_software

    @property
    def copyright_holder(self):
        """Gets the copyright_holder of this Model.

        Description not available  # noqa: E501

        :return: The copyright_holder of this Model.
        :rtype: List[AnyOfOrganizationPerson]
        """
        return self._copyright_holder

    @copyright_holder.setter
    def copyright_holder(self, copyright_holder):
        """Sets the copyright_holder of this Model.

        Description not available  # noqa: E501

        :param copyright_holder: The copyright_holder of this Model.
        :type copyright_holder: List[AnyOfOrganizationPerson]
        """

        self._copyright_holder = copyright_holder

    @property
    def has_faq(self):
        """Gets the has_faq of this Model.

        Description not available  # noqa: E501

        :return: The has_faq of this Model.
        :rtype: List[str]
        """
        return self._has_faq

    @has_faq.setter
    def has_faq(self, has_faq):
        """Sets the has_faq of this Model.

        Description not available  # noqa: E501

        :param has_faq: The has_faq of this Model.
        :type has_faq: List[str]
        """

        self._has_faq = has_faq

    @property
    def logo(self):
        """Gets the logo of this Model.

        Description not available  # noqa: E501

        :return: The logo of this Model.
        :rtype: List[Image]
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Model.

        Description not available  # noqa: E501

        :param logo: The logo of this Model.
        :type logo: List[Image]
        """

        self._logo = logo

    @property
    def has_contact_person(self):
        """Gets the has_contact_person of this Model.

        Description not available  # noqa: E501

        :return: The has_contact_person of this Model.
        :rtype: List[AnyOfOrganizationPerson]
        """
        return self._has_contact_person

    @has_contact_person.setter
    def has_contact_person(self, has_contact_person):
        """Sets the has_contact_person of this Model.

        Description not available  # noqa: E501

        :param has_contact_person: The has_contact_person of this Model.
        :type has_contact_person: List[AnyOfOrganizationPerson]
        """

        self._has_contact_person = has_contact_person

    @property
    def id(self):
        """Gets the id of this Model.

        identifier  # noqa: E501

        :return: The id of this Model.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Model.

        identifier  # noqa: E501

        :param id: The id of this Model.
        :type id: str
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this Model.

        Description not available  # noqa: E501

        :return: The identifier of this Model.
        :rtype: List[str]
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Model.

        Description not available  # noqa: E501

        :param identifier: The identifier of this Model.
        :type identifier: List[str]
        """

        self._identifier = identifier

    @property
    def author(self):
        """Gets the author of this Model.

        Description not available  # noqa: E501

        :return: The author of this Model.
        :rtype: List[AnyOfOrganizationPerson]
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Model.

        Description not available  # noqa: E501

        :param author: The author of this Model.
        :type author: List[AnyOfOrganizationPerson]
        """

        self._author = author

    @property
    def has_build_file(self):
        """Gets the has_build_file of this Model.

        Description not available  # noqa: E501

        :return: The has_build_file of this Model.
        :rtype: List[str]
        """
        return self._has_build_file

    @has_build_file.setter
    def has_build_file(self, has_build_file):
        """Sets the has_build_file of this Model.

        Description not available  # noqa: E501

        :param has_build_file: The has_build_file of this Model.
        :type has_build_file: List[str]
        """

        self._has_build_file = has_build_file

    @property
    def short_description(self):
        """Gets the short_description of this Model.

        Description not available  # noqa: E501

        :return: The short_description of this Model.
        :rtype: List[str]
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Model.

        Description not available  # noqa: E501

        :param short_description: The short_description of this Model.
        :type short_description: List[str]
        """

        self._short_description = short_description

    @property
    def date_published(self):
        """Gets the date_published of this Model.

        Description not available  # noqa: E501

        :return: The date_published of this Model.
        :rtype: List[datetime]
        """
        return self._date_published

    @date_published.setter
    def date_published(self, date_published):
        """Sets the date_published of this Model.

        Description not available  # noqa: E501

        :param date_published: The date_published of this Model.
        :type date_published: List[datetime]
        """

        self._date_published = date_published

    @property
    def license(self):
        """Gets the license of this Model.

        Description not available  # noqa: E501

        :return: The license of this Model.
        :rtype: List[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Model.

        Description not available  # noqa: E501

        :param license: The license of this Model.
        :type license: List[str]
        """

        self._license = license

    @property
    def has_source_code(self):
        """Gets the has_source_code of this Model.

        Description not available  # noqa: E501

        :return: The has_source_code of this Model.
        :rtype: List[SourceCode]
        """
        return self._has_source_code

    @has_source_code.setter
    def has_source_code(self, has_source_code):
        """Sets the has_source_code of this Model.

        Description not available  # noqa: E501

        :param has_source_code: The has_source_code of this Model.
        :type has_source_code: List[SourceCode]
        """

        self._has_source_code = has_source_code

    @property
    def has_explanation_diagram(self):
        """Gets the has_explanation_diagram of this Model.

        Diagram used to explain the behavior of the model  # noqa: E501

        :return: The has_explanation_diagram of this Model.
        :rtype: List[Image]
        """
        return self._has_explanation_diagram

    @has_explanation_diagram.setter
    def has_explanation_diagram(self, has_explanation_diagram):
        """Sets the has_explanation_diagram of this Model.

        Diagram used to explain the behavior of the model  # noqa: E501

        :param has_explanation_diagram: The has_explanation_diagram of this Model.
        :type has_explanation_diagram: List[Image]
        """

        self._has_explanation_diagram = has_explanation_diagram

    @property
    def has_example(self):
        """Gets the has_example of this Model.

        Description not available  # noqa: E501

        :return: The has_example of this Model.
        :rtype: List[str]
        """
        return self._has_example

    @has_example.setter
    def has_example(self, has_example):
        """Sets the has_example of this Model.

        Description not available  # noqa: E501

        :param has_example: The has_example of this Model.
        :type has_example: List[str]
        """

        self._has_example = has_example

    @property
    def publisher(self):
        """Gets the publisher of this Model.

        Description not available  # noqa: E501

        :return: The publisher of this Model.
        :rtype: List[AnyOfOrganizationPerson]
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher):
        """Sets the publisher of this Model.

        Description not available  # noqa: E501

        :param publisher: The publisher of this Model.
        :type publisher: List[AnyOfOrganizationPerson]
        """

        self._publisher = publisher

    @property
    def doi(self):
        """Gets the doi of this Model.

        Description not available  # noqa: E501

        :return: The doi of this Model.
        :rtype: List[str]
        """
        return self._doi

    @doi.setter
    def doi(self, doi):
        """Sets the doi of this Model.

        Description not available  # noqa: E501

        :param doi: The doi of this Model.
        :type doi: List[str]
        """

        self._doi = doi

    @property
    def has_funding(self):
        """Gets the has_funding of this Model.

        Description not available  # noqa: E501

        :return: The has_funding of this Model.
        :rtype: List[FundingInformation]
        """
        return self._has_funding

    @has_funding.setter
    def has_funding(self, has_funding):
        """Sets the has_funding of this Model.

        Description not available  # noqa: E501

        :param has_funding: The has_funding of this Model.
        :type has_funding: List[FundingInformation]
        """

        self._has_funding = has_funding

    @property
    def support_details(self):
        """Gets the support_details of this Model.

        Description not available  # noqa: E501

        :return: The support_details of this Model.
        :rtype: List[str]
        """
        return self._support_details

    @support_details.setter
    def support_details(self, support_details):
        """Sets the support_details of this Model.

        Description not available  # noqa: E501

        :param support_details: The support_details of this Model.
        :type support_details: List[str]
        """

        self._support_details = support_details

    @property
    def has_version(self):
        """Gets the has_version of this Model.

        Description not available  # noqa: E501

        :return: The has_version of this Model.
        :rtype: List[SoftwareVersion]
        """
        return self._has_version

    @has_version.setter
    def has_version(self, has_version):
        """Sets the has_version of this Model.

        Description not available  # noqa: E501

        :param has_version: The has_version of this Model.
        :type has_version: List[SoftwareVersion]
        """

        self._has_version = has_version

    @property
    def has_typical_data_source(self):
        """Gets the has_typical_data_source of this Model.

        Description not available  # noqa: E501

        :return: The has_typical_data_source of this Model.
        :rtype: List[str]
        """
        return self._has_typical_data_source

    @has_typical_data_source.setter
    def has_typical_data_source(self, has_typical_data_source):
        """Sets the has_typical_data_source of this Model.

        Description not available  # noqa: E501

        :param has_typical_data_source: The has_typical_data_source of this Model.
        :type has_typical_data_source: List[str]
        """

        self._has_typical_data_source = has_typical_data_source

    @property
    def description(self):
        """Gets the description of this Model.

        small description  # noqa: E501

        :return: The description of this Model.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Model.

        small description  # noqa: E501

        :param description: The description of this Model.
        :type description: List[str]
        """

        self._description = description

    @property
    def reference_publication(self):
        """Gets the reference_publication of this Model.

        Description not available  # noqa: E501

        :return: The reference_publication of this Model.
        :rtype: List[str]
        """
        return self._reference_publication

    @reference_publication.setter
    def reference_publication(self, reference_publication):
        """Sets the reference_publication of this Model.

        Description not available  # noqa: E501

        :param reference_publication: The reference_publication of this Model.
        :type reference_publication: List[str]
        """

        self._reference_publication = reference_publication

    @property
    def screenshot(self):
        """Gets the screenshot of this Model.

        Description not available  # noqa: E501

        :return: The screenshot of this Model.
        :rtype: List[Image]
        """
        return self._screenshot

    @screenshot.setter
    def screenshot(self, screenshot):
        """Sets the screenshot of this Model.

        Description not available  # noqa: E501

        :param screenshot: The screenshot of this Model.
        :type screenshot: List[Image]
        """

        self._screenshot = screenshot

    @property
    def has_model_category(self):
        """Gets the has_model_category of this Model.

        Category associated with a model (e.g., Hydrology, etc.)  # noqa: E501

        :return: The has_model_category of this Model.
        :rtype: List[ModelCategory]
        """
        return self._has_model_category

    @has_model_category.setter
    def has_model_category(self, has_model_category):
        """Sets the has_model_category of this Model.

        Category associated with a model (e.g., Hydrology, etc.)  # noqa: E501

        :param has_model_category: The has_model_category of this Model.
        :type has_model_category: List[ModelCategory]
        """

        self._has_model_category = has_model_category

    @property
    def had_primary_source(self):
        """Gets the had_primary_source of this Model.

        Description not available  # noqa: E501

        :return: The had_primary_source of this Model.
        :rtype: List[object]
        """
        return self._had_primary_source

    @had_primary_source.setter
    def had_primary_source(self, had_primary_source):
        """Sets the had_primary_source of this Model.

        Description not available  # noqa: E501

        :param had_primary_source: The had_primary_source of this Model.
        :type had_primary_source: List[object]
        """

        self._had_primary_source = had_primary_source

    @property
    def issue_tracker(self):
        """Gets the issue_tracker of this Model.

        Description not available  # noqa: E501

        :return: The issue_tracker of this Model.
        :rtype: List[str]
        """
        return self._issue_tracker

    @issue_tracker.setter
    def issue_tracker(self, issue_tracker):
        """Sets the issue_tracker of this Model.

        Description not available  # noqa: E501

        :param issue_tracker: The issue_tracker of this Model.
        :type issue_tracker: List[str]
        """

        self._issue_tracker = issue_tracker

    @property
    def date_created(self):
        """Gets the date_created of this Model.

        Description not available  # noqa: E501

        :return: The date_created of this Model.
        :rtype: List[datetime]
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Model.

        Description not available  # noqa: E501

        :param date_created: The date_created of this Model.
        :type date_created: List[datetime]
        """

        self._date_created = date_created

    @property
    def contributor(self):
        """Gets the contributor of this Model.

        Description not available  # noqa: E501

        :return: The contributor of this Model.
        :rtype: List[Person]
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this Model.

        Description not available  # noqa: E501

        :param contributor: The contributor of this Model.
        :type contributor: List[Person]
        """

        self._contributor = contributor

    @property
    def has_purpose(self):
        """Gets the has_purpose of this Model.

        Description not available  # noqa: E501

        :return: The has_purpose of this Model.
        :rtype: List[str]
        """
        return self._has_purpose

    @has_purpose.setter
    def has_purpose(self, has_purpose):
        """Sets the has_purpose of this Model.

        Description not available  # noqa: E501

        :param has_purpose: The has_purpose of this Model.
        :type has_purpose: List[str]
        """

        self._has_purpose = has_purpose

    @property
    def has_executable_instructions(self):
        """Gets the has_executable_instructions of this Model.

        Description not available  # noqa: E501

        :return: The has_executable_instructions of this Model.
        :rtype: List[str]
        """
        return self._has_executable_instructions

    @has_executable_instructions.setter
    def has_executable_instructions(self, has_executable_instructions):
        """Sets the has_executable_instructions of this Model.

        Description not available  # noqa: E501

        :param has_executable_instructions: The has_executable_instructions of this Model.
        :type has_executable_instructions: List[str]
        """

        self._has_executable_instructions = has_executable_instructions

    @property
    def has_sample_visualization(self):
        """Gets the has_sample_visualization of this Model.

        Description not available  # noqa: E501

        :return: The has_sample_visualization of this Model.
        :rtype: List[Visualization]
        """
        return self._has_sample_visualization

    @has_sample_visualization.setter
    def has_sample_visualization(self, has_sample_visualization):
        """Sets the has_sample_visualization of this Model.

        Description not available  # noqa: E501

        :param has_sample_visualization: The has_sample_visualization of this Model.
        :type has_sample_visualization: List[Visualization]
        """

        self._has_sample_visualization = has_sample_visualization

    @property
    def memory_requirements(self):
        """Gets the memory_requirements of this Model.

        Description not available  # noqa: E501

        :return: The memory_requirements of this Model.
        :rtype: List[str]
        """
        return self._memory_requirements

    @memory_requirements.setter
    def memory_requirements(self, memory_requirements):
        """Sets the memory_requirements of this Model.

        Description not available  # noqa: E501

        :param memory_requirements: The memory_requirements of this Model.
        :type memory_requirements: List[str]
        """

        self._memory_requirements = memory_requirements

    @property
    def website(self):
        """Gets the website of this Model.

        Description not available  # noqa: E501

        :return: The website of this Model.
        :rtype: List[str]
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Model.

        Description not available  # noqa: E501

        :param website: The website of this Model.
        :type website: List[str]
        """

        self._website = website

    @property
    def citation(self):
        """Gets the citation of this Model.

        Description not available  # noqa: E501

        :return: The citation of this Model.
        :rtype: List[str]
        """
        return self._citation

    @citation.setter
    def citation(self, citation):
        """Sets the citation of this Model.

        Description not available  # noqa: E501

        :param citation: The citation of this Model.
        :type citation: List[str]
        """

        self._citation = citation

    @property
    def processor_requirements(self):
        """Gets the processor_requirements of this Model.

        Description not available  # noqa: E501

        :return: The processor_requirements of this Model.
        :rtype: List[str]
        """
        return self._processor_requirements

    @processor_requirements.setter
    def processor_requirements(self, processor_requirements):
        """Sets the processor_requirements of this Model.

        Description not available  # noqa: E501

        :param processor_requirements: The processor_requirements of this Model.
        :type processor_requirements: List[str]
        """

        self._processor_requirements = processor_requirements

    @property
    def has_usage_notes(self):
        """Gets the has_usage_notes of this Model.

        Description not available  # noqa: E501

        :return: The has_usage_notes of this Model.
        :rtype: List[str]
        """
        return self._has_usage_notes

    @has_usage_notes.setter
    def has_usage_notes(self, has_usage_notes):
        """Sets the has_usage_notes of this Model.

        Description not available  # noqa: E501

        :param has_usage_notes: The has_usage_notes of this Model.
        :type has_usage_notes: List[str]
        """

        self._has_usage_notes = has_usage_notes

    @property
    def readme(self):
        """Gets the readme of this Model.

        Description not available  # noqa: E501

        :return: The readme of this Model.
        :rtype: List[str]
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this Model.

        Description not available  # noqa: E501

        :param readme: The readme of this Model.
        :type readme: List[str]
        """

        self._readme = readme

    @property
    def label(self):
        """Gets the label of this Model.

        short description of the resource  # noqa: E501

        :return: The label of this Model.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Model.

        short description of the resource  # noqa: E501

        :param label: The label of this Model.
        :type label: List[str]
        """

        self._label = label

    @property
    def has_assumption(self):
        """Gets the has_assumption of this Model.

        Description not available  # noqa: E501

        :return: The has_assumption of this Model.
        :rtype: List[str]
        """
        return self._has_assumption

    @has_assumption.setter
    def has_assumption(self, has_assumption):
        """Sets the has_assumption of this Model.

        Description not available  # noqa: E501

        :param has_assumption: The has_assumption of this Model.
        :type has_assumption: List[str]
        """

        self._has_assumption = has_assumption

    @property
    def operating_systems(self):
        """Gets the operating_systems of this Model.

        Description not available  # noqa: E501

        :return: The operating_systems of this Model.
        :rtype: List[str]
        """
        return self._operating_systems

    @operating_systems.setter
    def operating_systems(self, operating_systems):
        """Sets the operating_systems of this Model.

        Description not available  # noqa: E501

        :param operating_systems: The operating_systems of this Model.
        :type operating_systems: List[str]
        """

        self._operating_systems = operating_systems

    @property
    def has_executable_notebook(self):
        """Gets the has_executable_notebook of this Model.

        Description not available  # noqa: E501

        :return: The has_executable_notebook of this Model.
        :rtype: List[str]
        """
        return self._has_executable_notebook

    @has_executable_notebook.setter
    def has_executable_notebook(self, has_executable_notebook):
        """Sets the has_executable_notebook of this Model.

        Description not available  # noqa: E501

        :param has_executable_notebook: The has_executable_notebook of this Model.
        :type has_executable_notebook: List[str]
        """

        self._has_executable_notebook = has_executable_notebook

    @property
    def has_equation(self):
        """Gets the has_equation of this Model.

        Equations used in the model  # noqa: E501

        :return: The has_equation of this Model.
        :rtype: List[Equation]
        """
        return self._has_equation

    @has_equation.setter
    def has_equation(self, has_equation):
        """Sets the has_equation of this Model.

        Equations used in the model  # noqa: E501

        :param has_equation: The has_equation of this Model.
        :type has_equation: List[Equation]
        """

        self._has_equation = has_equation

    @property
    def useful_for_calculating_index(self):
        """Gets the useful_for_calculating_index of this Model.

        Description not available  # noqa: E501

        :return: The useful_for_calculating_index of this Model.
        :rtype: List[NumericalIndex]
        """
        return self._useful_for_calculating_index

    @useful_for_calculating_index.setter
    def useful_for_calculating_index(self, useful_for_calculating_index):
        """Sets the useful_for_calculating_index of this Model.

        Description not available  # noqa: E501

        :param useful_for_calculating_index: The useful_for_calculating_index of this Model.
        :type useful_for_calculating_index: List[NumericalIndex]
        """

        self._useful_for_calculating_index = useful_for_calculating_index
