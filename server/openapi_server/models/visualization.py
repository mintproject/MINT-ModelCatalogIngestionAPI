# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Visualization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_format=None, had_primary_source=None, was_derived_from_software=None, description=None, id=None, label=None, type=None, value=None):  # noqa: E501
        """Visualization - a model defined in OpenAPI

        :param has_format: The has_format of this Visualization.  # noqa: E501
        :type has_format: List[str]
        :param had_primary_source: The had_primary_source of this Visualization.  # noqa: E501
        :type had_primary_source: List[object]
        :param was_derived_from_software: The was_derived_from_software of this Visualization.  # noqa: E501
        :type was_derived_from_software: List[Software]
        :param description: The description of this Visualization.  # noqa: E501
        :type description: List[str]
        :param id: The id of this Visualization.  # noqa: E501
        :type id: str
        :param label: The label of this Visualization.  # noqa: E501
        :type label: List[str]
        :param type: The type of this Visualization.  # noqa: E501
        :type type: List[str]
        :param value: The value of this Visualization.  # noqa: E501
        :type value: List[AnyOfURIbooleanDateTimefloatintegerstring]
        """
        from openapi_server.models.any_of_ur_iboolean_date_timefloatintegerstring import AnyOfURIbooleanDateTimefloatintegerstring
        from openapi_server.models.software import Software

          # noqa: E501
          # noqa: E501

        self.openapi_types = {
            'has_format': List[str],
            'had_primary_source': List[object],
            'was_derived_from_software': List[Software],
            'description': List[str],
            'id': str,
            'label': List[str],
            'type': List[str],
            'value': List[AnyOfURIbooleanDateTimefloatintegerstring]
        }

        self.attribute_map = {
            'has_format': 'hasFormat',
            'had_primary_source': 'hadPrimarySource',
            'was_derived_from_software': 'wasDerivedFromSoftware',
            'description': 'description',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'value': 'value'
        }

        self._has_format = has_format
        self._had_primary_source = had_primary_source
        self._was_derived_from_software = was_derived_from_software
        self._description = description
        self._id = id
        self._label = label
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Visualization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Visualization of this Visualization.  # noqa: E501
        :rtype: Visualization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_format(self):
        """Gets the has_format of this Visualization.

        Format followed by a file. For example, txt, nc, etc.  # noqa: E501

        :return: The has_format of this Visualization.
        :rtype: List[str]
        """
        return self._has_format

    @has_format.setter
    def has_format(self, has_format):
        """Sets the has_format of this Visualization.

        Format followed by a file. For example, txt, nc, etc.  # noqa: E501

        :param has_format: The has_format of this Visualization.
        :type has_format: List[str]
        """

        self._has_format = has_format

    @property
    def had_primary_source(self):
        """Gets the had_primary_source of this Visualization.

        Property to identify the original source of the information of the annotated resource. It could be a web page, an organization, a person, some experiment notes, etc.  # noqa: E501

        :return: The had_primary_source of this Visualization.
        :rtype: List[object]
        """
        return self._had_primary_source

    @had_primary_source.setter
    def had_primary_source(self, had_primary_source):
        """Sets the had_primary_source of this Visualization.

        Property to identify the original source of the information of the annotated resource. It could be a web page, an organization, a person, some experiment notes, etc.  # noqa: E501

        :param had_primary_source: The had_primary_source of this Visualization.
        :type had_primary_source: List[object]
        """

        self._had_primary_source = had_primary_source

    @property
    def was_derived_from_software(self):
        """Gets the was_derived_from_software of this Visualization.

        Property that identifies the software used to create a visualization  # noqa: E501

        :return: The was_derived_from_software of this Visualization.
        :rtype: List[Software]
        """
        return self._was_derived_from_software

    @was_derived_from_software.setter
    def was_derived_from_software(self, was_derived_from_software):
        """Sets the was_derived_from_software of this Visualization.

        Property that identifies the software used to create a visualization  # noqa: E501

        :param was_derived_from_software: The was_derived_from_software of this Visualization.
        :type was_derived_from_software: List[Software]
        """

        self._was_derived_from_software = was_derived_from_software

    @property
    def description(self):
        """Gets the description of this Visualization.

        small description  # noqa: E501

        :return: The description of this Visualization.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Visualization.

        small description  # noqa: E501

        :param description: The description of this Visualization.
        :type description: List[str]
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Visualization.

        identifier  # noqa: E501

        :return: The id of this Visualization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Visualization.

        identifier  # noqa: E501

        :param id: The id of this Visualization.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Visualization.

        short description of the resource  # noqa: E501

        :return: The label of this Visualization.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Visualization.

        short description of the resource  # noqa: E501

        :param label: The label of this Visualization.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this Visualization.

        type of the resource  # noqa: E501

        :return: The type of this Visualization.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Visualization.

        type of the resource  # noqa: E501

        :param type: The type of this Visualization.
        :type type: List[str]
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Visualization.

        Value associated to the described entity  # noqa: E501

        :return: The value of this Visualization.
        :rtype: List[AnyOfURIbooleanDateTimefloatintegerstring]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Visualization.

        Value associated to the described entity  # noqa: E501

        :param value: The value of this Visualization.
        :type value: List[AnyOfURIbooleanDateTimefloatintegerstring]
        """

        self._value = value
