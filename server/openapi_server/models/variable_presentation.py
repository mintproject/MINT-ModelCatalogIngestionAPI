# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from openapi_server import util
from openapi_server.models.unit import Unit
from openapi_server.models.base_model_ import Model


class VariablePresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, label=None, description=None, long_name=None, short_name=None, standard_name=None, relevance_level=None, unit=None):  # noqa: E501
        """VariablePresentation - a model defined in OpenAPI

        :param id: The id of this VariablePresentation.  # noqa: E501
        :type id: str
        :param type: The type of this VariablePresentation.  # noqa: E501
        :type type: List[str]
        :param label: The label of this VariablePresentation.  # noqa: E501
        :type label: str
        :param description: The description of this VariablePresentation.  # noqa: E501
        :type description: str
        :param long_name: The long_name of this VariablePresentation.  # noqa: E501
        :type long_name: str
        :param short_name: The short_name of this VariablePresentation.  # noqa: E501
        :type short_name: str
        :param standard_name: The standard_name of this VariablePresentation.  # noqa: E501
        :type standard_name: str
        :param relevance_level: The relevance_level of this VariablePresentation.  # noqa: E501
        :type relevance_level: int
        :param unit: The unit of this VariablePresentation.  # noqa: E501
        :type unit: Unit
        """
        self.openapi_types = {
            'id': str,
            'type': List[str],
            'label': str,
            'description': str,
            'long_name': str,
            'short_name': str,
            'standard_name': str,
            'relevance_level': int,
            'unit': Unit
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'label': 'label',
            'description': 'description',
            'long_name': 'long_name',
            'short_name': 'short_name',
            'standard_name': 'standard_name',
            'relevance_level': 'relevance_level',
            'unit': 'unit'
        }

        self._id = id
        self._type = type
        self._label = label
        self._description = description
        self._long_name = long_name
        self._short_name = short_name
        self._standard_name = standard_name
        self._relevance_level = relevance_level
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'VariablePresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VariablePresentation of this VariablePresentation.  # noqa: E501
        :rtype: VariablePresentation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this VariablePresentation.


        :return: The id of this VariablePresentation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VariablePresentation.


        :param id: The id of this VariablePresentation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this VariablePresentation.


        :return: The type of this VariablePresentation.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VariablePresentation.


        :param type: The type of this VariablePresentation.
        :type type: List[str]
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this VariablePresentation.


        :return: The label of this VariablePresentation.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this VariablePresentation.


        :param label: The label of this VariablePresentation.
        :type label: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this VariablePresentation.


        :return: The description of this VariablePresentation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VariablePresentation.


        :param description: The description of this VariablePresentation.
        :type description: str
        """

        self._description = description

    @property
    def long_name(self):
        """Gets the long_name of this VariablePresentation.


        :return: The long_name of this VariablePresentation.
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this VariablePresentation.


        :param long_name: The long_name of this VariablePresentation.
        :type long_name: str
        """

        self._long_name = long_name

    @property
    def short_name(self):
        """Gets the short_name of this VariablePresentation.


        :return: The short_name of this VariablePresentation.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this VariablePresentation.


        :param short_name: The short_name of this VariablePresentation.
        :type short_name: str
        """

        self._short_name = short_name

    @property
    def standard_name(self):
        """Gets the standard_name of this VariablePresentation.


        :return: The standard_name of this VariablePresentation.
        :rtype: str
        """
        return self._standard_name

    @standard_name.setter
    def standard_name(self, standard_name):
        """Sets the standard_name of this VariablePresentation.


        :param standard_name: The standard_name of this VariablePresentation.
        :type standard_name: str
        """

        self._standard_name = standard_name

    @property
    def relevance_level(self):
        """Gets the relevance_level of this VariablePresentation.


        :return: The relevance_level of this VariablePresentation.
        :rtype: int
        """
        return self._relevance_level

    @relevance_level.setter
    def relevance_level(self, relevance_level):
        """Sets the relevance_level of this VariablePresentation.


        :param relevance_level: The relevance_level of this VariablePresentation.
        :type relevance_level: int
        """

        self._relevance_level = relevance_level

    @property
    def unit(self):
        """Gets the unit of this VariablePresentation.


        :return: The unit of this VariablePresentation.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this VariablePresentation.


        :param unit: The unit of this VariablePresentation.
        :type unit: Unit
        """

        self._unit = unit
