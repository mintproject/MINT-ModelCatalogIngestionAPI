# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class SourceCode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license=None, programming_language=None, description=None, code_repository=None, id=None, label=None, type=None):  # noqa: E501
        """SourceCode - a model defined in OpenAPI

        :param license: The license of this SourceCode.  # noqa: E501
        :type license: List[str]
        :param programming_language: The programming_language of this SourceCode.  # noqa: E501
        :type programming_language: List[str]
        :param description: The description of this SourceCode.  # noqa: E501
        :type description: List[str]
        :param code_repository: The code_repository of this SourceCode.  # noqa: E501
        :type code_repository: List[str]
        :param id: The id of this SourceCode.  # noqa: E501
        :type id: str
        :param label: The label of this SourceCode.  # noqa: E501
        :type label: List[str]
        :param type: The type of this SourceCode.  # noqa: E501
        :type type: List[str]
        """


        self.openapi_types = {
            'license': List[str],
            'programming_language': List[str],
            'description': List[str],
            'code_repository': List[str],
            'id': str,
            'label': List[str],
            'type': List[str]
        }

        self.attribute_map = {
            'license': 'license',
            'programming_language': 'programmingLanguage',
            'description': 'description',
            'code_repository': 'codeRepository',
            'id': 'id',
            'label': 'label',
            'type': 'type'
        }

        self._license = license
        self._programming_language = programming_language
        self._description = description
        self._code_repository = code_repository
        self._id = id
        self._label = label
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'SourceCode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SourceCode of this SourceCode.  # noqa: E501
        :rtype: SourceCode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license(self):
        """Gets the license of this SourceCode.


        :return: The license of this SourceCode.
        :rtype: List[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SourceCode.


        :param license: The license of this SourceCode.
        :type license: List[str]
        """

        self._license = license

    @property
    def programming_language(self):
        """Gets the programming_language of this SourceCode.


        :return: The programming_language of this SourceCode.
        :rtype: List[str]
        """
        return self._programming_language

    @programming_language.setter
    def programming_language(self, programming_language):
        """Sets the programming_language of this SourceCode.


        :param programming_language: The programming_language of this SourceCode.
        :type programming_language: List[str]
        """

        self._programming_language = programming_language

    @property
    def description(self):
        """Gets the description of this SourceCode.


        :return: The description of this SourceCode.
        :rtype: List[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SourceCode.


        :param description: The description of this SourceCode.
        :type description: List[str]
        """

        self._description = description

    @property
    def code_repository(self):
        """Gets the code_repository of this SourceCode.


        :return: The code_repository of this SourceCode.
        :rtype: List[str]
        """
        return self._code_repository

    @code_repository.setter
    def code_repository(self, code_repository):
        """Sets the code_repository of this SourceCode.


        :param code_repository: The code_repository of this SourceCode.
        :type code_repository: List[str]
        """

        self._code_repository = code_repository

    @property
    def id(self):
        """Gets the id of this SourceCode.


        :return: The id of this SourceCode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SourceCode.


        :param id: The id of this SourceCode.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this SourceCode.


        :return: The label of this SourceCode.
        :rtype: List[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SourceCode.


        :param label: The label of this SourceCode.
        :type label: List[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this SourceCode.


        :return: The type of this SourceCode.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SourceCode.


        :param type: The type of this SourceCode.
        :type type: List[str]
        """

        self._type = type
