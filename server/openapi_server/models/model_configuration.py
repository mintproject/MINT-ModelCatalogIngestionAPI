# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from openapi_server import util
from openapi_server.models.time_interval import TimeInterval
from openapi_server.models.cag import CAG
from openapi_server.models.parameter import Parameter
from openapi_server.models.data_set import DataSet
from openapi_server.models.process import Process
from openapi_server.models.base_model_ import Model


class ModelConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, label=None, has_input=None, has_output=None, description=None, has_cag=None, has_process=None, has_time_interval=None, has_implementation_script_location=None, has_container=None, has_constraint=None, has_parameter=None, has_component_location=None):  # noqa: E501
        """ModelConfiguration - a model defined in OpenAPI

        :param id: The id of this ModelConfiguration.  # noqa: E501
        :type id: str
        :param type: The type of this ModelConfiguration.  # noqa: E501
        :type type: List[str]
        :param label: The label of this ModelConfiguration.  # noqa: E501
        :type label: str
        :param has_input: The has_input of this ModelConfiguration.  # noqa: E501
        :type has_input: List[DataSet]
        :param has_output: The has_output of this ModelConfiguration.  # noqa: E501
        :type has_output: List[DataSet]
        :param description: The description of this ModelConfiguration.  # noqa: E501
        :type description: str
        :param has_cag: The has_cag of this ModelConfiguration.  # noqa: E501
        :type has_cag: List[CAG]
        :param has_process: The has_process of this ModelConfiguration.  # noqa: E501
        :type has_process: List[Process]
        :param has_time_interval: The has_time_interval of this ModelConfiguration.  # noqa: E501
        :type has_time_interval: List[TimeInterval]
        :param has_implementation_script_location: The has_implementation_script_location of this ModelConfiguration.  # noqa: E501
        :type has_implementation_script_location: str
        :param has_container: The has_container of this ModelConfiguration.  # noqa: E501
        :type has_container: str
        :param has_constraint: The has_constraint of this ModelConfiguration.  # noqa: E501
        :type has_constraint: str
        :param has_parameter: The has_parameter of this ModelConfiguration.  # noqa: E501
        :type has_parameter: List[Parameter]
        :param has_component_location: The has_component_location of this ModelConfiguration.  # noqa: E501
        :type has_component_location: str
        """
        self.openapi_types = {
            'id': str,
            'type': List[str],
            'label': str,
            'has_input': List[DataSet],
            'has_output': List[DataSet],
            'description': str,
            'has_cag': List[CAG],
            'has_process': List[Process],
            'has_time_interval': List[TimeInterval],
            'has_implementation_script_location': str,
            'has_container': str,
            'has_constraint': str,
            'has_parameter': List[Parameter],
            'has_component_location': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'label': 'label',
            'has_input': 'has_input',
            'has_output': 'has_output',
            'description': 'description',
            'has_cag': 'has_cag',
            'has_process': 'has_process',
            'has_time_interval': 'has_time_interval',
            'has_implementation_script_location': 'has_implementation_script_location',
            'has_container': 'has_container',
            'has_constraint': 'has_constraint',
            'has_parameter': 'has_parameter',
            'has_component_location': 'has_component_location'
        }

        self._id = id
        self._type = type
        self._label = label
        self._has_input = has_input
        self._has_output = has_output
        self._description = description
        self._has_cag = has_cag
        self._has_process = has_process
        self._has_time_interval = has_time_interval
        self._has_implementation_script_location = has_implementation_script_location
        self._has_container = has_container
        self._has_constraint = has_constraint
        self._has_parameter = has_parameter
        self._has_component_location = has_component_location

    @classmethod
    def from_dict(cls, dikt) -> 'ModelConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelConfiguration of this ModelConfiguration.  # noqa: E501
        :rtype: ModelConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ModelConfiguration.


        :return: The id of this ModelConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelConfiguration.


        :param id: The id of this ModelConfiguration.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this ModelConfiguration.


        :return: The type of this ModelConfiguration.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelConfiguration.


        :param type: The type of this ModelConfiguration.
        :type type: List[str]
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this ModelConfiguration.


        :return: The label of this ModelConfiguration.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ModelConfiguration.


        :param label: The label of this ModelConfiguration.
        :type label: str
        """

        self._label = label

    @property
    def has_input(self):
        """Gets the has_input of this ModelConfiguration.


        :return: The has_input of this ModelConfiguration.
        :rtype: List[DataSet]
        """
        return self._has_input

    @has_input.setter
    def has_input(self, has_input):
        """Sets the has_input of this ModelConfiguration.


        :param has_input: The has_input of this ModelConfiguration.
        :type has_input: List[DataSet]
        """

        self._has_input = has_input

    @property
    def has_output(self):
        """Gets the has_output of this ModelConfiguration.


        :return: The has_output of this ModelConfiguration.
        :rtype: List[DataSet]
        """
        return self._has_output

    @has_output.setter
    def has_output(self, has_output):
        """Sets the has_output of this ModelConfiguration.


        :param has_output: The has_output of this ModelConfiguration.
        :type has_output: List[DataSet]
        """

        self._has_output = has_output

    @property
    def description(self):
        """Gets the description of this ModelConfiguration.


        :return: The description of this ModelConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelConfiguration.


        :param description: The description of this ModelConfiguration.
        :type description: str
        """

        self._description = description

    @property
    def has_cag(self):
        """Gets the has_cag of this ModelConfiguration.


        :return: The has_cag of this ModelConfiguration.
        :rtype: List[CAG]
        """
        return self._has_cag

    @has_cag.setter
    def has_cag(self, has_cag):
        """Sets the has_cag of this ModelConfiguration.


        :param has_cag: The has_cag of this ModelConfiguration.
        :type has_cag: List[CAG]
        """

        self._has_cag = has_cag

    @property
    def has_process(self):
        """Gets the has_process of this ModelConfiguration.


        :return: The has_process of this ModelConfiguration.
        :rtype: List[Process]
        """
        return self._has_process

    @has_process.setter
    def has_process(self, has_process):
        """Sets the has_process of this ModelConfiguration.


        :param has_process: The has_process of this ModelConfiguration.
        :type has_process: List[Process]
        """

        self._has_process = has_process

    @property
    def has_time_interval(self):
        """Gets the has_time_interval of this ModelConfiguration.


        :return: The has_time_interval of this ModelConfiguration.
        :rtype: List[TimeInterval]
        """
        return self._has_time_interval

    @has_time_interval.setter
    def has_time_interval(self, has_time_interval):
        """Sets the has_time_interval of this ModelConfiguration.


        :param has_time_interval: The has_time_interval of this ModelConfiguration.
        :type has_time_interval: List[TimeInterval]
        """

        self._has_time_interval = has_time_interval

    @property
    def has_implementation_script_location(self):
        """Gets the has_implementation_script_location of this ModelConfiguration.


        :return: The has_implementation_script_location of this ModelConfiguration.
        :rtype: str
        """
        return self._has_implementation_script_location

    @has_implementation_script_location.setter
    def has_implementation_script_location(self, has_implementation_script_location):
        """Sets the has_implementation_script_location of this ModelConfiguration.


        :param has_implementation_script_location: The has_implementation_script_location of this ModelConfiguration.
        :type has_implementation_script_location: str
        """

        self._has_implementation_script_location = has_implementation_script_location

    @property
    def has_container(self):
        """Gets the has_container of this ModelConfiguration.


        :return: The has_container of this ModelConfiguration.
        :rtype: str
        """
        return self._has_container

    @has_container.setter
    def has_container(self, has_container):
        """Sets the has_container of this ModelConfiguration.


        :param has_container: The has_container of this ModelConfiguration.
        :type has_container: str
        """

        self._has_container = has_container

    @property
    def has_constraint(self):
        """Gets the has_constraint of this ModelConfiguration.


        :return: The has_constraint of this ModelConfiguration.
        :rtype: str
        """
        return self._has_constraint

    @has_constraint.setter
    def has_constraint(self, has_constraint):
        """Sets the has_constraint of this ModelConfiguration.


        :param has_constraint: The has_constraint of this ModelConfiguration.
        :type has_constraint: str
        """

        self._has_constraint = has_constraint

    @property
    def has_parameter(self):
        """Gets the has_parameter of this ModelConfiguration.


        :return: The has_parameter of this ModelConfiguration.
        :rtype: List[Parameter]
        """
        return self._has_parameter

    @has_parameter.setter
    def has_parameter(self, has_parameter):
        """Sets the has_parameter of this ModelConfiguration.


        :param has_parameter: The has_parameter of this ModelConfiguration.
        :type has_parameter: List[Parameter]
        """

        self._has_parameter = has_parameter

    @property
    def has_component_location(self):
        """Gets the has_component_location of this ModelConfiguration.


        :return: The has_component_location of this ModelConfiguration.
        :rtype: str
        """
        return self._has_component_location

    @has_component_location.setter
    def has_component_location(self, has_component_location):
        """Sets the has_component_location of this ModelConfiguration.


        :param has_component_location: The has_component_location of this ModelConfiguration.
        :type has_component_location: str
        """

        self._has_component_location = has_component_location
