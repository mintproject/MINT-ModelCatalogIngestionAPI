# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from openapi_server import util
from openapi_server.models.base_model_ import Model
from openapi_server.models.unit import Unit


class TimeInterval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, type=None, label=None, description=None, unit=None, value=None):  # noqa: E501
        """TimeInterval - a model defined in OpenAPI

        :param id: The id of this TimeInterval.  # noqa: E501
        :type id: str
        :param type: The type of this TimeInterval.  # noqa: E501
        :type type: List[str]
        :param label: The label of this TimeInterval.  # noqa: E501
        :type label: str
        :param description: The description of this TimeInterval.  # noqa: E501
        :type description: str
        :param unit: The unit of this TimeInterval.  # noqa: E501
        :type unit: Unit
        :param value: The value of this TimeInterval.  # noqa: E501
        :type value: int
        """
        self.openapi_types = {
            'id': str,
            'type': List[str],
            'label': str,
            'description': str,
            'unit': Unit,
            'value': int
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'label': 'label',
            'description': 'description',
            'unit': 'unit',
            'value': 'value'
        }

        self._id = id
        self._type = type
        self._label = label
        self._description = description
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'TimeInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimeInterval of this TimeInterval.  # noqa: E501
        :rtype: TimeInterval
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TimeInterval.


        :return: The id of this TimeInterval.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TimeInterval.


        :param id: The id of this TimeInterval.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this TimeInterval.


        :return: The type of this TimeInterval.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TimeInterval.


        :param type: The type of this TimeInterval.
        :type type: List[str]
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this TimeInterval.


        :return: The label of this TimeInterval.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TimeInterval.


        :param label: The label of this TimeInterval.
        :type label: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this TimeInterval.


        :return: The description of this TimeInterval.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TimeInterval.


        :param description: The description of this TimeInterval.
        :type description: str
        """

        self._description = description

    @property
    def unit(self):
        """Gets the unit of this TimeInterval.


        :return: The unit of this TimeInterval.
        :rtype: Unit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TimeInterval.


        :param unit: The unit of this TimeInterval.
        :type unit: Unit
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this TimeInterval.


        :return: The value of this TimeInterval.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TimeInterval.


        :param value: The value of this TimeInterval.
        :type value: int
        """

        self._value = value
