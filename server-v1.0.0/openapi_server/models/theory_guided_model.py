# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TheoryGuidedModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_grid=None, has_explanation_diagram=None, has_equation=None, id=None, label=None, type=None, has_model_category=None):  # noqa: E501
        """TheoryGuidedModel - a model defined in OpenAPI

        :param has_grid: The has_grid of this TheoryGuidedModel.  # noqa: E501
        :type has_grid: List[Grid]
        :param has_explanation_diagram: The has_explanation_diagram of this TheoryGuidedModel.  # noqa: E501
        :type has_explanation_diagram: List[object]
        :param has_equation: The has_equation of this TheoryGuidedModel.  # noqa: E501
        :type has_equation: List[Equation]
        :param id: The id of this TheoryGuidedModel.  # noqa: E501
        :type id: str
        :param label: The label of this TheoryGuidedModel.  # noqa: E501
        :type label: str
        :param type: The type of this TheoryGuidedModel.  # noqa: E501
        :type type: List[str]
        :param has_model_category: The has_model_category of this TheoryGuidedModel.  # noqa: E501
        :type has_model_category: List[str]
        """
        from openapi_server.models.equation import Equation
        from openapi_server.models.grid import Grid

          # noqa: E501
          # noqa: E501

        self.openapi_types = {
            'has_grid': List[Grid],
            'has_explanation_diagram': List[object],
            'has_equation': List[Equation],
            'id': str,
            'label': str,
            'type': List[str],
            'has_model_category': List[str]
        }

        self.attribute_map = {
            'has_grid': 'hasGrid',
            'has_explanation_diagram': 'hasExplanationDiagram',
            'has_equation': 'hasEquation',
            'id': 'id',
            'label': 'label',
            'type': 'type',
            'has_model_category': 'hasModelCategory'
        }

        self._has_grid = has_grid
        self._has_explanation_diagram = has_explanation_diagram
        self._has_equation = has_equation
        self._id = id
        self._label = label
        self._type = type
        self._has_model_category = has_model_category

    @classmethod
    def from_dict(cls, dikt) -> 'TheoryGuidedModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Theory-GuidedModel of this TheoryGuidedModel.  # noqa: E501
        :rtype: TheoryGuidedModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_grid(self):
        """Gets the has_grid of this TheoryGuidedModel.


        :return: The has_grid of this TheoryGuidedModel.
        :rtype: List[Grid]
        """
        return self._has_grid

    @has_grid.setter
    def has_grid(self, has_grid):
        """Sets the has_grid of this TheoryGuidedModel.


        :param has_grid: The has_grid of this TheoryGuidedModel.
        :type has_grid: List[Grid]
        """

        self._has_grid = has_grid

    @property
    def has_explanation_diagram(self):
        """Gets the has_explanation_diagram of this TheoryGuidedModel.


        :return: The has_explanation_diagram of this TheoryGuidedModel.
        :rtype: List[object]
        """
        return self._has_explanation_diagram

    @has_explanation_diagram.setter
    def has_explanation_diagram(self, has_explanation_diagram):
        """Sets the has_explanation_diagram of this TheoryGuidedModel.


        :param has_explanation_diagram: The has_explanation_diagram of this TheoryGuidedModel.
        :type has_explanation_diagram: List[object]
        """

        self._has_explanation_diagram = has_explanation_diagram

    @property
    def has_equation(self):
        """Gets the has_equation of this TheoryGuidedModel.


        :return: The has_equation of this TheoryGuidedModel.
        :rtype: List[Equation]
        """
        return self._has_equation

    @has_equation.setter
    def has_equation(self, has_equation):
        """Sets the has_equation of this TheoryGuidedModel.


        :param has_equation: The has_equation of this TheoryGuidedModel.
        :type has_equation: List[Equation]
        """

        self._has_equation = has_equation

    @property
    def id(self):
        """Gets the id of this TheoryGuidedModel.


        :return: The id of this TheoryGuidedModel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TheoryGuidedModel.


        :param id: The id of this TheoryGuidedModel.
        :type id: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this TheoryGuidedModel.


        :return: The label of this TheoryGuidedModel.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this TheoryGuidedModel.


        :param label: The label of this TheoryGuidedModel.
        :type label: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this TheoryGuidedModel.


        :return: The type of this TheoryGuidedModel.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TheoryGuidedModel.


        :param type: The type of this TheoryGuidedModel.
        :type type: List[str]
        """

        self._type = type

    @property
    def has_model_category(self):
        """Gets the has_model_category of this TheoryGuidedModel.


        :return: The has_model_category of this TheoryGuidedModel.
        :rtype: List[str]
        """
        return self._has_model_category

    @has_model_category.setter
    def has_model_category(self, has_model_category):
        """Sets the has_model_category of this TheoryGuidedModel.


        :param has_model_category: The has_model_category of this TheoryGuidedModel.
        :type has_model_category: List[str]
        """

        self._has_model_category = has_model_category
