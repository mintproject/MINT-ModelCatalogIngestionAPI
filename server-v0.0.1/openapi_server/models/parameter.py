# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Parameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri=None, type=None, label=None, description=None, defaultvalue=None, datatype=None):  # noqa: E501
        """Parameter - a model defined in OpenAPI

        :param uri: The uri of this Parameter.  # noqa: E501
        :type uri: str
        :param type: The type of this Parameter.  # noqa: E501
        :type type: List[str]
        :param label: The label of this Parameter.  # noqa: E501
        :type label: str
        :param description: The description of this Parameter.  # noqa: E501
        :type description: str
        :param defaultvalue: The defaultvalue of this Parameter.  # noqa: E501
        :type defaultvalue: str
        :param datatype: The datatype of this Parameter.  # noqa: E501
        :type datatype: str
        """
        self.openapi_types = {
            'uri': str,
            'type': List[str],
            'label': str,
            'description': str,
            'defaultvalue': str,
            'datatype': str
        }

        self.attribute_map = {
            'uri': 'uri',
            'type': 'type',
            'label': 'label',
            'description': 'description',
            'defaultvalue': 'defaultvalue',
            'datatype': 'datatype'
        }

        self._uri = uri
        self._type = type
        self._label = label
        self._description = description
        self._defaultvalue = defaultvalue
        self._datatype = datatype

    @classmethod
    def from_dict(cls, dikt) -> 'Parameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Parameter of this Parameter.  # noqa: E501
        :rtype: Parameter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this Parameter.


        :return: The uri of this Parameter.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Parameter.


        :param uri: The uri of this Parameter.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this Parameter.


        :return: The type of this Parameter.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Parameter.


        :param type: The type of this Parameter.
        :type type: List[str]
        """

        self._type = type

    @property
    def label(self):
        """Gets the label of this Parameter.


        :return: The label of this Parameter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Parameter.


        :param label: The label of this Parameter.
        :type label: str
        """

        self._label = label

    @property
    def description(self):
        """Gets the description of this Parameter.


        :return: The description of this Parameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Parameter.


        :param description: The description of this Parameter.
        :type description: str
        """

        self._description = description

    @property
    def defaultvalue(self):
        """Gets the defaultvalue of this Parameter.


        :return: The defaultvalue of this Parameter.
        :rtype: str
        """
        return self._defaultvalue

    @defaultvalue.setter
    def defaultvalue(self, defaultvalue):
        """Sets the defaultvalue of this Parameter.


        :param defaultvalue: The defaultvalue of this Parameter.
        :type defaultvalue: str
        """

        self._defaultvalue = defaultvalue

    @property
    def datatype(self):
        """Gets the datatype of this Parameter.


        :return: The datatype of this Parameter.
        :rtype: str
        """
        return self._datatype

    @datatype.setter
    def datatype(self, datatype):
        """Sets the datatype of this Parameter.


        :param datatype: The datatype of this Parameter.
        :type datatype: str
        """

        self._datatype = datatype
