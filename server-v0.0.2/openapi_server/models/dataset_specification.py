# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util
from openapi_server.models.variable_presentation import VariablePresentation

class DatasetSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label=None, has_format=None, description=None, has_dimensionality=None, has_presentation=None, type=["https://w3id.org/mint/modelCatalog#DatasetSpecification"], id=None):  # noqa: E501
        """DatasetSpecification - a model defined in OpenAPI

        :param label: The label of this DatasetSpecification.  # noqa: E501
        :type label: str
        :param has_format: The has_format of this DatasetSpecification.  # noqa: E501
        :type has_format: str
        :param description: The description of this DatasetSpecification.  # noqa: E501
        :type description: str
        :param has_dimensionality: The has_dimensionality of this DatasetSpecification.  # noqa: E501
        :type has_dimensionality: int
        :param has_presentation: The has_presentation of this DatasetSpecification.  # noqa: E501
        :type has_presentation: List[VariablePresentation]
        :param type: The type of this DatasetSpecification.  # noqa: E501
        :type type: List[str]
        :param id: The id of this DatasetSpecification.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'label': str,
            'has_format': str,
            'description': str,
            'has_dimensionality': int,
            'has_presentation': List[VariablePresentation],
            'type': List[str],
            'id': str
        }

        self.attribute_map = {
            'label': 'label',
            'has_format': 'hasFormat',
            'description': 'description',
            'has_dimensionality': 'hasDimensionality',
            'has_presentation': 'hasPresentation',
            'type': 'type',
            'id': 'id'
        }

        self._label = label
        self._has_format = has_format
        self._description = description
        self._has_dimensionality = has_dimensionality
        self._has_presentation = has_presentation
        self._type = type
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DatasetSpecification of this DatasetSpecification.  # noqa: E501
        :rtype: DatasetSpecification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this DatasetSpecification.


        :return: The label of this DatasetSpecification.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DatasetSpecification.


        :param label: The label of this DatasetSpecification.
        :type label: str
        """

        self._label = label

    @property
    def has_format(self):
        """Gets the has_format of this DatasetSpecification.


        :return: The has_format of this DatasetSpecification.
        :rtype: str
        """
        return self._has_format

    @has_format.setter
    def has_format(self, has_format):
        """Sets the has_format of this DatasetSpecification.


        :param has_format: The has_format of this DatasetSpecification.
        :type has_format: str
        """

        self._has_format = has_format

    @property
    def description(self):
        """Gets the description of this DatasetSpecification.


        :return: The description of this DatasetSpecification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DatasetSpecification.


        :param description: The description of this DatasetSpecification.
        :type description: str
        """

        self._description = description

    @property
    def has_dimensionality(self):
        """Gets the has_dimensionality of this DatasetSpecification.


        :return: The has_dimensionality of this DatasetSpecification.
        :rtype: int
        """
        return self._has_dimensionality

    @has_dimensionality.setter
    def has_dimensionality(self, has_dimensionality):
        """Sets the has_dimensionality of this DatasetSpecification.


        :param has_dimensionality: The has_dimensionality of this DatasetSpecification.
        :type has_dimensionality: int
        """

        self._has_dimensionality = has_dimensionality

    @property
    def has_presentation(self):
        """Gets the has_presentation of this DatasetSpecification.


        :return: The has_presentation of this DatasetSpecification.
        :rtype: List[VariablePresentation]
        """
        return self._has_presentation

    @has_presentation.setter
    def has_presentation(self, has_presentation):
        """Sets the has_presentation of this DatasetSpecification.


        :param has_presentation: The has_presentation of this DatasetSpecification.
        :type has_presentation: List[VariablePresentation]
        """

        self._has_presentation = has_presentation

    @property
    def type(self):
        """Gets the type of this DatasetSpecification.


        :return: The type of this DatasetSpecification.
        :rtype: List[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatasetSpecification.


        :param type: The type of this DatasetSpecification.
        :type type: List[str]
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this DatasetSpecification.


        :return: The id of this DatasetSpecification.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DatasetSpecification.


        :param id: The id of this DatasetSpecification.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id
