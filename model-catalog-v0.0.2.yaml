---
openapi: 3.0.1
info:
  title: Model Catalog
  description: This is MINT Model Catalog You can find out more about     Model Catalog
    at [https://mintproject.github.io/Mint-ModelCatalog-Ontology/modelCatalog/release/0.4.0/](https://mintproject.github.io/Mint-ModelCatalog-Ontology/modelCatalog/release/0.4.0/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: mosorio@isi.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "0.0.2"
servers:
- url: https://api.models.mint.isi.edu/v0.0.2
- url: https://dev.api.models.mint.isi.edu/v0.0.2
- url: http://localhost:8080/v0.0.2
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      security: 
        - BearerAuth: []        

    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /modelconfigurations:
    get:
      tags:
      - modelconfiguration
      summary: List modelconfiguration
      operationId: listModelConfigurations
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelConfiguration'
        400:
          description: Invalid uri supplied
      security: []        
    post:
      tags:
      - modelconfiguration
      summary: Create a model configuration
      operationId: addModelConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfiguration'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json: {}
        400:
          description: Invalid
      security:
        - BearerAuth: []
  /modelconfiguration/{id}/inputs:
    get:
      tags:
      - modelconfiguration
      summary: Get the inputs of a model configuration
      operationId: getInputsByModelconfiguration
      parameters:
      - name: id
        in: path
        description: |
          The name of the resource
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid uri supplied
        404:
          description: Model Configuration not found
      security: []        
    post:
      tags:
      - modelconfiguration    
      summary: Creates a new instance of a `Dataset` related as Input.
      operationId: addInputsByModelconfiguration
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        201:
          description: Created
        400:
          description: Request body is incorrect
        403:
          description: You are not authorized to do that
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                exit:
                  value: |-
                    {
                        "code": 30,
                        "type": "some text",
                        "message": "some text"
                    }
      security:
      - BearerAuth: []
    parameters:
    - name: id
      in: path
      description: A unique identifier for a `ModelConfiguration`.
      required: true
      schema:
        type: string
  /modelconfiguration/{id}/outputs:
    get:
      tags:
      - modelconfiguration
      summary: Get the outputs of a model configuration
      operationId: getOutputsByModelconfiguration
      parameters:
      - name: id
        in: path
        description: |
          The name of the resource
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid uri supplied
        404:
          description: Model Configuration not found
      security: []        
    post:
      tags:
      - modelconfiguration    
      summary: Create the output of a model configuration
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        201:
          description: Created
        400:
          description: Request body is incorrect
        403:
          description: You are not authorized to do that
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                exit:
                  value: |-
                    {
                        "code": 30,
                        "type": "some text",
                        "message": "some text"
                    }
      security:
      - BearerAuth: []
    parameters:
    - name: id
      in: path
      description: A unique identifier for a `ModelConfiguration`.
      required: true
      schema:
        type: string
  /modelconfiguration/{id}/parameters:
    get:
      tags:
      - modelconfiguration
      summary: Get the parameters of a model configuration
      operationId: getParametersByModelconfiguration
      parameters:
      - name: id
        in: path
        description: |
          The name of the resource
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponse'
        400:
          description: Invalid uri supplied
        404:
          description: Model Configuration not found
      security: []        
    post:
      tags:
      - modelconfiguration    
      summary: Create the inputs of a model configuration
      description: Creates a new instance of a `Dataset` and it related with the `ModelConfiguration`.
      operationId: addParametersByModelconfiguration
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Parameter'
        required: true
      responses:
        201:
          description: Created
        400:
          description: Request body is incorrect
        403:
          description: You are not authorized to do that
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                exit:
                  value: |-
                    {
                        "code": 30,
                        "type": "some text",
                        "message": "some text"
                    }
      security:
      - BearerAuth: []
    parameters:
    - name: id
      in: path
      description: A unique identifier for a `ModelConfiguration`.
      required: true
      schema:
        type: string
  /modelversions:
    get:
      tags:
        - modelversion
      summary: List All ModelVersions
      description: Gets a list of all `ModelVersion` entities.
      operationId: getModelVersions
      responses:
        200:
          description: Successful response - returns an array of `ModelVersion` entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelVersion'
      security: []        
    post:
      tags:
        - modelversion    
      summary: Create a ModelVersion
      description: Creates a new instance of a `ModelVersion`.
      operationId: createModelVersion
      requestBody:
        description: A new `ModelVersion` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        required: true
      responses:
        201:
          description: Successful response.
      security:
        - BearerAuth: []
  /datasets:
    get:
      tags:
        - dataset    
      summary: List All datasets
      description: Gets a list of all `dataset` entities.
      operationId: getdatasets
      responses:
        200:
          description: Successful response - returns an array of `dataset` entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSet'
      security: []        
    post:
      tags:
        - dataset        
      summary: Create a dataset
      description: Creates a new instance of a `dataset`.
      operationId: createdataset
      requestBody:
        description: A new `dataset` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSet'
        required: true
      responses:
        201:
          description: Successful response.
      security:
        - BearerAuth: []   
  /models:
    get:
      tags:
        - model    
      summary: List All models
      description: Gets a list of all `model` entities.
      operationId: getmodels
      responses:
        200:
          description: Successful response - returns an array of `model` entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
      security: []        
    post:
      tags:
        - model    
      summary: Create a model
      description: Creates a new instance of a `model`.
      operationId: createmodel
      requestBody:
        description: A new `model` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
      responses:
        201:
          description: Successful response.
      security:
      - BearerAuth: []
  /parameters:
    get:
      tags:
        - parameter  
      summary: List All Parameters
      description: Gets a list of all `Parameter` entities.
      operationId: getParameters
      responses:
        200:
          description: Successful response - returns an array of `Parameter` entities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parameter'
      security: []        
    post:
      tags:
        - parameter    
      summary: Create a Parameter
      description: Creates a new instance of a `Parameter`.
      operationId: createParameter
      requestBody:
        description: A new `Parameter` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parameter'
        required: true
      responses:
        201:
          description: Successful response.
      security:
      - BearerAuth: []
  /model/{modelId}:
    get:
      tags:
        - model    
      summary: Get a Model
      description: Gets the details of a single instance of a `Model`.
      operationId: getModel
      responses:
        200:
          description: Successful response - returns a single `Model`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
      security: []        
    put:
      tags:
        - model    
      summary: Update a Model
      description: Updates an existing `Model`.
      operationId: updateModel
      requestBody:
        description: Updated `Model` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
        required: true
      responses:
        202:
          description: Successful response.
      security:
      - BearerAuth: []
    delete:
      tags:
        - model    
      summary: Delete a Model
      description: Deletes an existing `Model`.
      operationId: deleteModel
      responses:
        204:
          description: Successful response.
      security:
      - BearerAuth: []          
    parameters:
    - name: modelId
      in: path
      description: A unique identifier for a `Model`.
      required: true
      schema:
        type: string
  /modelversion/{modelVersionId}:
    get:
      tags:
        - modelversion    
      summary: Get a ModelVersion
      description: Gets the details of a single instance of a `ModelVersion`.
      operationId: getModelVersion
      responses:
        200:
          description: Successful response - returns a single `ModelVersion`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
      security: []        
    put:
      tags:
        - modelversion       
      summary: Update a ModelVersion
      description: Updates an existing `ModelVersion`.
      operationId: updateModelVersion
      requestBody:
        description: Updated `ModelVersion` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersion'
        required: true
      responses:
        202:
          description: Successful response.
      security:
      - BearerAuth: []      
    delete:
      tags:
        - modelversion       
      summary: Delete a ModelVersion
      description: Deletes an existing `ModelVersion`.
      operationId: deleteModelVersion
      responses:
        204:
          description: Successful response.
      security: []    
    parameters:
    - 
      name: modelVersionId
      in: path
      description: A unique identifier for a `ModelVersion`.
      required: true
      schema:
        type: string
  /modelconfiguration/{id}:
    get:
      tags:
      - modelconfiguration
      summary: Get modelconfiguration by uri
      description: Gets the details of a single instance of a `ModelConfiguration`.
      operationId: getModelConfiguratonByUri
      parameters:
      - name: id
        in: path
        description: A unique identifier for a `ModelConfiguration`.
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelConfiguration'
        400:
          description: Invalid uri supplied
        404:
          description: Model Configuration not found
      security: []       
    put:
      tags:
      - modelconfiguration
      summary: Update model configuration
      operationId: updateModelConfiguration
      parameters:
      - name: name
        in: path
        description: A unique identifier for a `ModelConfiguration`.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfiguration'
        required: true
      responses:
        200:
          description: Updated
      security:
      - BearerAuth: []
    delete:
      tags:
      - modelconfiguration
      summary: Delete a ModelConfiguration
      description: Deletes an existing `ModelConfiguration`.
      operationId: deleteModelConfiguration
      responses:
        204:
          description: Successful response.
        400:
          description: Invalid ID supplied
        403:
          description: You don't the permissions
      security:
      - BearerAuth: []
    parameters:
    - name: id
      in: path
      description: A unique identifier for a `ModelConfiguration`.
      required: true
      schema:
        type: string
components:
  schemas:
    DataSet:
      required:
      - id
      type: object
      properties:
        label:
          type: string
        has_format:
          type: string
        description:
          type: string
        has_dimensionality:
          format: int64
          type: integer
        has_presentation:
          type: array
          items:
            $ref: '#/components/schemas/VariablePresentation'
        type:
          type: array
          items:
            type: string
        id:
          type: string
      example:
        id: crop-yield
        label: crop-yield
        has_format: csv
        description: Contains the yield elasticities to fertilizer use that are derived from
          Cycles output
        has_dimensionality: 0
        has_presentation:
        - id: https://w3id.org/mint/instance/econ_ybarN          
    ModelConfiguration:
      type: object
      required:
      - id      
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        label:
          type: string
        has_input:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
        has_output:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
        description:
          type: string
        has_cag:
          type: array
          items:
            $ref: '#/components/schemas/CAG'
        has_process:
          type: array
          items:
            $ref: '#/components/schemas/Process'
        has_time_interval:
          type: array
          items:
            $ref: '#/components/schemas/TimeInterval'
        has_implementation_script_location:
          type: string
        has_container:
          type: array
          items:
            type: object
        has_constraint:
          type: string
        has_parameter:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        has_component_location:
          type: string
      example:
        id: economic
        label: Economic aggregate crop supply
        has_input:
        - id: econ_yield
        has_output:
        - id: econ_land_use
        description: Aggregate crop supply response model for the country of South Sudan configuration
        has_cag:
        - id: economic_aggregate_crop_supply_CAG_variables
        - id: economic_aggregate_crop_supply_CAG_process
        has_process:
        - id: crop_yield
        - id: crop_supply
        has_time_interval:
        - id: economic_aggregate_crop_supply_TI
        has_implementation_script_location: https://raw.githubusercontent.com/KnowledgeCaptureAndDiscovery/MINT-WorkflowDomain/master/WINGSWorkflowComponents/economic/run
        has_container:
        - id: https://w3id.org/mint/instance/mintproject/economic:latest
        has_constraint: "[ backwardPIHMInputsDataHaveSameRegion: (?c rdf:type acdom:pihmClass)
          (?c ac:hasInput ?in1) (?c ac:hasInput ?in2) noValue(?in1 dcdom:region) noValue(?in2
          dcdom:region) uriConcat(?c '_region' ?location) -> (?in1 dcdom:region ?location)
          (?in2 dcdom:region ?location) print('Setting domain of ?in1 and ?in2 to ?location
          because both inputs to PIHM should be from the same region')]"
        has_parameter:
        - id: pihm_start-date
        - id: pihm_end-date
        has_component_location: https://github.com/KnowledgeCaptureAndDiscovery/MINT-WorkflowDomain/raw/master/WINGSWorkflowComponents/economic/economic.zip
    Parameter:
      required:
      - id
      type: object
      properties:
        id:
            type: string          
        type:
          type: array
          items:
            type: string
        label:
          type: string
        description:
          type: string
        has_default_value:
          type: string
        has_data_type:
          type: string
      example:
        id: pihm_start-date
        type:
        - https://w3id.org/wings/export/MINT#StartDate
        label: pihm_start-date
        description: start date
        has_default_value: '2017-01-01'
        has_data_type: string
    Process:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        label:
          type: string
        influences:
          description: Property that describe the causal relationship between two
            processes, two variables, a process and a variable or a variable and a
            process
          type: array
          items:
            $ref: '#/components/schemas/Process'
      example:
        id: crop_yield
        label: crop yield
        influences:
        - id: https://w3id.org/mint/instance/crop_supply          
    TimeInterval:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        label:
          type: string
        description:
          type: string
        has_unit:
          $ref: '#/components/schemas/Unit'
        has_value:
          format: int64
          type: integer
      example:
        id: economic_aggregate_crop_supply_TI
        type:
        - https://example.org/externalCatalog#TimeInterval
        label: Simple economic time interval
        description: Time interval used in the aggregate crop supply response model for the
          country of South Sudan configuration
        has_unit:
          id: https://w3id.org/mint/instance/yearT
        has_value: 1          
    Unit:
      required:
      - id    
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        description:
          type: string
        label:
          type: string
        ccut_has_part:
          type: array
          items:
            type: string
        ccut_has_dimensionality:
          type: array
          items:
            type: string
        abbreviation:
          type: array
          items:
            type: string
      example:
        id: USD_kg_1M_1
        type:
        - http://qudt.org/1.1/schema/qudt#Unit
        label: USD kg-1
        ccut_has_part:
        - u_USD
        - u__1_M_kilo_gram_kg
        ccut_has_dimensionality:
        - M-1
        abbreviation:
        - USD kg-1          
    VariablePresentation:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        label:
          type: string
        description:
          type: string
        has_long_name:
          type: string
        has_short_name:
          type: string
        has_standard_variable:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
        has_relevance_level:
          format: int64
          type: integer
        uses_unit:
          $ref: '#/components/schemas/Unit'
      example:
        id: econ_ybarN
        label: ybarN
        description: Contains the yield elasticities to fertilizer use that are derived from
          Cycles output
        has_long_name: yield elasticity
        has_short_name: ybarN
        has_standard_variable: 
        - id: crop_fertilizer~nitrogen__yield_elasticity
        has_relevance_level: 1
        uses_unit:
          id: USD_kg_1M_1            
    User:
      type: object
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          format: int32
          description: User Status
          type: integer
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
    CAG:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        type:
          type: array
          items:
            type: string
        has_part:
          description: Array of Parameter or Variables
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
          anyOf:
          - $ref: '#/components/schemas/VariablePresentation'
          - $ref: '#/components/schemas/Process'
        label:
          description: ''
          type: string
      example:
        id: economic_aggregate_crop_supply_CAG_variables
        label: CAG for Economic model for aggregate crop supply response model variables for
          the country of South Sudan configuration
        type:
        - https://w3id.org/mint/modelCatalog#CAG
        has_part:
        - id: https://w3id.org/mint/instance/econ_ybarN
        - id: https://w3id.org/mint/instance/econ_production
    Model:
      description: ""
      required:
      - id
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        type:
          type: array
          items:
            type: string
        has_software_version:
          type: array
          items:
            type: object
        has_model_category:
          type: array
          items:
            type: string
        has_documentation:
          type: array
          items:
            type: string
      example:
        id: DSSAT
        label: DSSAT
        description: The Decision Support System for Agrotechnology Transfer (DSSAT) comprises
          dynamic crop growth simulation model for over 40 crops. The model simulates growth;
          development; and yield as a function of the soil-plant-atmosphere dynamics.
        type:
        - https://w3id.org/mint/modelCatalog#Model
        - https://w3id.org/mint/modelCatalog#TheoryBasedModel
        has_software_version:
        - id: DSSAT_4.7
        has_model_category:
        - Agriculture
        has_documentation:
        - https://dssat.net
    ModelVersion:
      description: ""
      required:
      - id
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        type:
          type: array
          items:
            type: string
        has_documentation:
          type: array
          items:
            type: string
        has_version_id:
          type: string
        has_configuration:
          type: array
          items:
            $ref: '#/components/schemas/ModelConfiguration'
      example:
        id: DSSAT_4.7
        label: DSSAT v4.7
        type:
        - http://ontosoft.org/software#SoftwareVersion
        has_version_id: '4.7'
        has_configuration:
        - id: economic
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: openapi_server.controllers.user_controller.decode_token
      
externalDocs:
  description: Find out more about MINT
  url: http://mint.isi.edu