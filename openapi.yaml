---
openapi: 3.0.1
info:
  title: Model Catalog
  description: This is MINT Model Catalog You can find out more about     Model Catalog
    at [http://swagger.io](https://mintproject.github.io/Mint-ModelCatalog-Ontology/modelCatalog/release/0.4.0/)
  termsOfService: http://swagger.io/terms/
  contact:
    email: mosorio@isi.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
- url: http://api.mint.isi.edu/v0.0.1
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Simple User:
                value: |-
                  {
                      "id": 53,
                      "username": "some text",
                      "firstName": "some text",
                      "lastName": "some text",
                      "email": "some text",
                      "password": "some text",
                      "phone": "some text",
                      "userStatus": 75
                  }
        required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                format: int32
                type: integer
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                format: date-time
                type: string
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
  /modelconfiguration/:
    get:
      tags:
      - modelconfiguration
      summary: List modelconfiguration
      operationId: listModelConfigurations
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ModelConfiguration'
        400:
          description: Invalid uri supplied
    post:
      tags:
      - modelconfiguration
      summary: Create a model configuration
      operationId: addModelConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfiguration'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json: {}
        400:
          description: Invalid
      security:
      - bearerAuth: []
  /modelconfiguration/{uri}:
    get:
      tags:
      - modelconfiguration
      summary: Get modelconfiguration by uri
      operationId: getModelConfiguratonByUri
      parameters:
      - name: uri
        in: path
        description: 'The uri needed '
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelConfiguration'
        400:
          description: Invalid uri supplied
        404:
          description: Model Configuration not found
    put:
      tags:
      - modelconfiguration
      summary: Update model configuration
      operationId: updateModelConfiguration
      parameters:
      - name: uri
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelConfiguration'
        required: true
      responses:
        200:
          description: Updated
      security:
      - bearerAuth: []
    delete:
      tags:
      - modelconfiguration
      operationId: deleteModelConfiguration
      parameters:
      - name: uri
        in: path
        description: URI model configuration
        required: true
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
        403:
          description: You don't the permissions
      security:
      - bearerAuth: []
components:
  schemas:
    CAG:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        parts:
          anyOf:
          - $ref: '#/components/schemas/VariablePresentation'
          - $ref: '#/components/schemas/Process'
    DataSet:
      required:
      - type
      type: object
      properties:
        uri:
          type: string
        label:
          type: string
        format:
          type: string
        description:
          type: string
        dimensionality:
          format: int64
          type: integer
        presentations:
          type: array
          items:
            $ref: '#/components/schemas/VariablePresentation'
        type:
          description: '    '
          type: string
    ModelConfiguration:
      required:
      - name
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
        description:
          type: string
        cag:
          $ref: '#/components/schemas/CAG'
        process:
          type: array
          items:
            $ref: '#/components/schemas/Process'
        intervalTime:
          $ref: '#/components/schemas/TimeInterval'
        implementationScriptLocation:
          type: string
        container:
          type: string
        component:
          type: string
        constrainT:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
    Parameter:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
        description:
          type: string
        datatype:
          type: string
        defaultvalue:
          type: string
    Process:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
        incluencer:
          type: array
          items:
            $ref: '#/components/schemas/Process'
    TimeInterval:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
        description:
          type: string
        unit:
          $ref: '#/components/schemas/Unit'
        value:
          format: int64
          type: integer
    Unit:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
    VariablePresentation:
      type: object
      properties:
        uri:
          type: string
        type:
          type: string
        label:
          type: string
        description:
          type: string
        long_name:
          type: string
        short_name:
          type: string
        standard_name:
          type: string
        relevance_level:
          format: int64
          type: integer
    User:
      type: object
      properties:
        id:
          format: int64
          type: integer
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          format: int32
          description: User Status
          type: integer
      xml:
        name: User
    ApiResponse:
      type: object
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      description: Bearer auth
      scheme: bearer
security:
- bearerAuth: []
tags:
- name: modelconfiguration
  description: Access to Petstore orders
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
externalDocs:
  description: Find out more about MINT
  url: http://mint.isi.edu
